<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Code Signing on Public Key Infrastructure (PKI) Consortium</title><link>https://pkic.org/tags/code-signing/</link><description>Recent content in Code Signing on Public Key Infrastructure (PKI) Consortium</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>PKI Consortium, Inc. All Rights Reserved</copyright><lastBuildDate>Tue, 12 May 2020 18:18:10 +0000</lastBuildDate><atom:link href="https://pkic.org/tags/code-signing/feed/index.xml" rel="self" type="application/rss+xml"/><item><title>Don’t ‘Compromise’ Your Code Amid Malware Mayhem</title><link>https://pkic.org/2020/05/12/dont-compromise-your-code-amid-malware-mayhem/</link><pubDate>Tue, 12 May 2020 18:18:10 +0000</pubDate><guid>https://pkic.org/2020/05/12/dont-compromise-your-code-amid-malware-mayhem/</guid><description>Code Signing Certificates demand a price premium in the underground online marketplace. This is no surprise considering that criminals sometimes use them to dupe their potential victims into installing malware in their machine.</description></item><item><title>5 Ways to Keep Up with Authentication Certificates</title><link>https://pkic.org/2020/02/24/5-ways-to-keep-up-with-authentication-certificates/</link><pubDate>Mon, 24 Feb 2020 13:38:54 +0000</pubDate><guid>https://pkic.org/2020/02/24/5-ways-to-keep-up-with-authentication-certificates/</guid><description>When it comes to protecting an organization’s data and users, CISOs have no shortage of hurdles. Identity attacks have become sophisticated and convincing, thanks to ransomware, phishing and deep fakes. CISOs have long known the importance of strong identification and authentication controls, but with threats constantly changing and intensifying, having these controls in place is just one piece of the puzzle; they must be managed correctly in order to do their job.</description></item><item><title>Online Identity Is Important: Let’s Upgrade Extended Validation</title><link>https://pkic.org/2019/10/21/online-identity-is-important-lets-upgrade-extended-validation/</link><pubDate>Mon, 21 Oct 2019 18:11:11 +0000</pubDate><guid>https://pkic.org/2019/10/21/online-identity-is-important-lets-upgrade-extended-validation/</guid><description>It’s time for the CA/Browser Forum to focus on the other half of its mandate Let’s have a candid discussion about Extended Validation SSL. What’s working. What’s NOT. And what can be done to fix it so that all parties involved are satisfied.
But first, let’s zoom out and talk big picture. The vast majority of website owners almost never think of SSL. They worry about it once every year or so when it needs to be replaced, but it’s not really a major point of consideration.</description></item><item><title>9 Common Myths About CAs</title><link>https://pkic.org/2019/08/01/9-common-myths-about-cas/</link><pubDate>Thu, 01 Aug 2019 15:00:04 +0000</pubDate><guid>https://pkic.org/2019/08/01/9-common-myths-about-cas/</guid><description>Over the years misconceptions about CAs and the SSL infrastructure have arisen. Below is a list of common myths related to SSL and CAs.
Myth #1: CAs are not regulated Fact: CAs are subject to various checks and balances, including third-party qualified audits through WebTrust or ETSI and strict criteria set forth by leading browsers, before they are accepted in browser root stores. Similarly, the CA/Browser Forum’s Baseline Requirements and Network Security Guidelines establish global standards for certificate issuance and CA controls that will soon be included in third-party auditing standards.</description></item><item><title>What Are Subordinate CAs and Why Would You Want Your Own?</title><link>https://pkic.org/2019/06/26/what-are-subordinate-cas-and-why-would-you-want-your-own/</link><pubDate>Wed, 26 Jun 2019 16:04:51 +0000</pubDate><guid>https://pkic.org/2019/06/26/what-are-subordinate-cas-and-why-would-you-want-your-own/</guid><description>Digital certificate and PKI adoption has changed quite a bit in recent years. Gone are the days where certificates were only synonymous with SSL/TLS; compliance drivers like stronger authentication requirements and digital signature regulations (e.g. eIDAS) have greatly expanded the role of PKI within the enterprise.
As PKI usage has expanded, conversation has moved beyond just the number and type of certificates needed and onto deeper dialogue about custom PKI deployments.</description></item><item><title>2019 – Looking Back, Moving Forward</title><link>https://pkic.org/2019/01/03/2019-looking-back-moving-forward/</link><pubDate>Thu, 03 Jan 2019 14:24:26 +0000</pubDate><guid>https://pkic.org/2019/01/03/2019-looking-back-moving-forward/</guid><description>Looking Back at 2018 2018 was an active year for SSL/TLS. We saw the SSL/TLS certificate validity period drop to 825-days and the mass deployment of Certificate Transparency (CT). TLS 1.3 protocol was finally completed and published; and Chrome status bar security indicators changing to remove “secure” and to concentrate on “not secure.” The CA/Browser Forum has been reformed, the London Protocol was announced and the nearly full distrust of Symantec SSL completed.</description></item><item><title>Fortify Allows Users to Generate X.509 Certificates in Their Browser</title><link>https://pkic.org/2018/06/19/fortify-allows-users-to-generate-x.509-certificates-in-their-browser/</link><pubDate>Tue, 19 Jun 2018 14:00:25 +0000</pubDate><guid>https://pkic.org/2018/06/19/fortify-allows-users-to-generate-x.509-certificates-in-their-browser/</guid><description>Fortify, an open source application sponsored by Certificate Authorities through the CA Security Council, is now available for Windows and Mac. The Fortify app, which is free for all users, connects a user’s web browsers to smart cards, security tokens, and certificates on a user’s local machine. This can allow users to generate X.509 certificates in their browser, replacing the need for the deprecated &amp;lt;keygen&amp;gt; functionality.
Certificate Generation In The Browser The Web Cryptography API, also known as Web Crypto, provides a set of cryptographic capabilities for web browsers through a set of JavaScript APIs.</description></item><item><title>Fortify Provides a More Secure Web Experience for Certificates and Smart Cards</title><link>https://pkic.org/2018/06/19/fortify-provides-a-more-secure-web-experience-for-certificates-and-smart-cards/</link><pubDate>Tue, 19 Jun 2018 14:00:23 +0000</pubDate><guid>https://pkic.org/2018/06/19/fortify-provides-a-more-secure-web-experience-for-certificates-and-smart-cards/</guid><description>San Francisco – June 19, 2018 – The Certificate Authority Security Council (CASC), an advocacy group committed to the advancement of web security, today announced that Fortify, an open source application sponsored by the Council, is now available for Windows and Mac. Fortify, a free app, connects a user’s web browsers to smart cards, security tokens, and certificates on a user’s local machine. This allows users to generate X.509 certificates in their browser, replacing the loss of key generation functionality.</description></item><item><title>CA/Browser Forum Governance Reform</title><link>https://pkic.org/2018/05/18/ca/browser-forum-governance-reform/</link><pubDate>Fri, 18 May 2018 12:17:14 +0000</pubDate><guid>https://pkic.org/2018/05/18/ca/browser-forum-governance-reform/</guid><description>In March 2016, the CA/Browser Forum formed a working group to review potential ways to restructure the forum. The primary goal was to examine ideas so the Forum could work on other types of standards besides TLS. Ben Wilson and I chaired this group with excellent participation from a cross functional team of browser and certificate authority representatives as well as interested parties. After 2 years of efforts, the working group produced Ballot 206 which passed in April 2017.</description></item><item><title>2017 – Looking Back, Moving Forward</title><link>https://pkic.org/2017/01/13/2017-looking-back-moving-forward/</link><pubDate>Fri, 13 Jan 2017 21:11:15 +0000</pubDate><guid>https://pkic.org/2017/01/13/2017-looking-back-moving-forward/</guid><description>Looking Back at 2016 Fortunately, 2016 was not a year full of SSL/TLS vulnerabilities. Although some researchers did prove old cryptography algorithms should be put out to pasture. The year showed the end of public-trusted SHA-1 SSL/TLS certificates. It also showed more transparency should be considered due to issues discovered with a few certification authorities (CAs). The great news is HTTPS is no longer the minority — after 20 years, connections using HTTPS has surpassed HTTP.</description></item><item><title>Leading Certificate Authorities and Microsoft Introduce New Standards to Protect Consumers Online</title><link>https://pkic.org/2016/12/08/leading-certificate-authorities-and-microsoft-introduce-new-standards-to-protect-consumers-online/</link><pubDate>Thu, 08 Dec 2016 21:05:41 +0000</pubDate><guid>https://pkic.org/2016/12/08/leading-certificate-authorities-and-microsoft-introduce-new-standards-to-protect-consumers-online/</guid><description>San Francisco –December 8, 2016 – the Certificate Authority Security Council (CASC), an advocacy group committed to the advancement web security, today announced the Code Signing Working Group has released new Minimum Requirements for Code Signing for use by all Certificate Authorities (CA). These requirements represent the first-ever standardized code signing guidelines. Code signing is the method of using a certificate-based digital signature to sign executables and scripts in order to verify the author’s identity and ensure that the code has not been changed or corrupted.</description></item><item><title>Minimum Requirements for Code Signing Certificates</title><link>https://pkic.org/2016/07/20/minimum-requirements-for-code-signing-certificates/</link><pubDate>Wed, 20 Jul 2016 20:47:02 +0000</pubDate><guid>https://pkic.org/2016/07/20/minimum-requirements-for-code-signing-certificates/</guid><description>It is time for an update on the Baseline Requirements for Code Signing.
First the bad news, the new standard was not approved by the CA/Browser Forum due to philosophical differences among some forum members who felt code signing was not in scope with the Forum’s charter.
The good news is the document was created in a multi-stakeholder environment and substantially improves the current management processes. As such, it was decided to bring the document outside of the forum and finalize it as part of the CA Security Council.</description></item><item><title>TLS Certificates on the Web – The Good, The Bad and The Ugly</title><link>https://pkic.org/2016/05/17/tls-certificates-on-the-web-the-good-the-bad-and-the-ugly/</link><pubDate>Tue, 17 May 2016 14:30:47 +0000</pubDate><guid>https://pkic.org/2016/05/17/tls-certificates-on-the-web-the-good-the-bad-and-the-ugly/</guid><description>It might be hard to believe, but the SSL/TLS Ecosystem is nearly 20 years old. It’s time to take stock and see how we’re doing with regards to TLS certificates. In this article, we’ll primarily discuss certificates themselves and not web server configuration, although that is often a source of problems.
In the last few years, we’ve endured three major certificate-based migrations:
Away from the MD2 and MD5 hash algorithms to SHA-1 Away from small RSA keys to 2048-bit keys or larger Away from the SHA-1 hash algorithm to SHA-256 What’s driving these migrations?</description></item><item><title>2016 – Looking Back, Moving Forward</title><link>https://pkic.org/2015/12/14/2016-looking-back-moving-forward/</link><pubDate>Mon, 14 Dec 2015 19:53:24 +0000</pubDate><guid>https://pkic.org/2015/12/14/2016-looking-back-moving-forward/</guid><description>Looking Back at 2015 A number of new tactics proved 2015 was no exception to an active year defending against ever increasing security issues. Vendors found new and creative ways to provide vulnerabilities including the now popular man-in-the-middle (MitM) attacks. MitM as well as a host of other new vulnerabilities caused browsers to rethink their security requirements. This article gives a flashback of the exploits and industry changes from 2015 and looks ahead at the latest security requirements and how it impacts IT security teams.</description></item><item><title>Code Signing Baseline Requirements</title><link>https://pkic.org/2015/11/30/code-signing-baseline-requirements/</link><pubDate>Mon, 30 Nov 2015 17:51:30 +0000</pubDate><guid>https://pkic.org/2015/11/30/code-signing-baseline-requirements/</guid><description>You may have heard that the CA/Browser Forum is getting ready to approve Baseline Requirements for Code Signing certificates. But why is this important?
Let’s back up and get some background on code signing. Software code that is digitally signed indicates to the user that the code has not been tampered with since it was signed. It also provides authenticity as to who signed it and when. With the advent of malware, it’s important to insure that the code which was written by the developer is the same code which you downloaded and installed into your computer or mobile phone.</description></item><item><title>What Are “Application Reputation” and “Publisher Reputation”?</title><link>https://pkic.org/2015/08/27/what-are-application-reputation-and-publisher-reputation/</link><pubDate>Thu, 27 Aug 2015 02:13:49 +0000</pubDate><guid>https://pkic.org/2015/08/27/what-are-application-reputation-and-publisher-reputation/</guid><description>As one dog says to the other in Peter Steiner’s classic New Yorker cartoon– “On the Internet, nobody knows you’re a dog.”
Software downloaded from the Internet is similar to people on the Internet–it is hard to tell which ones are dogs–without help, which is what “application reputation” technology provides. “Application reputation” and “publisher reputation” are methods employed by Microsoft’s SmartScreen and other systems to distinguish good software from bad software as it is downloaded from the Internet.</description></item><item><title>Lenovo Enables Man-in-the-Middle Attacks Via Superfish Adware</title><link>https://pkic.org/2015/02/20/lenovo-enables-man-in-the-middle-attacks-via-superfish-adware/</link><pubDate>Fri, 20 Feb 2015 22:27:36 +0000</pubDate><guid>https://pkic.org/2015/02/20/lenovo-enables-man-in-the-middle-attacks-via-superfish-adware/</guid><description>Lenovo is selling computers that contain the Superfish application which “supplements” the user’s SSL sessions to enable their adware application to deliver content transparently; however, due to poor security design this leaves users vulnerable to man-in-the-middle attacks.
How it was supposed to work Superfish uses the program “Visual Discovery” to process images in browser content and then displays ads for similar goods and services. This sounds like any other adware application, but in order to maintain SSL sessions and not alert users with security warnings, Superfish is serving up these images over https.</description></item><item><title>2015 – Looking Back, Moving Forward</title><link>https://pkic.org/2015/01/06/2015-looking-back-moving-forward/</link><pubDate>Tue, 06 Jan 2015 16:30:28 +0000</pubDate><guid>https://pkic.org/2015/01/06/2015-looking-back-moving-forward/</guid><description>Looking Back at 2014 End of 1024-Bit Security In 2014, the SSL industry moved to issuing a minimum security of 2048-bit RSA certificates. Keys smaller than 2048 are no longer allowed in server certificates. In addition, Microsoft and Mozilla started to remove 1024-bit roots from their certificate stores. Hopefully, the key size change will support users through to 2030.
Push to Perfect Forward Secrecy Following the Edward Snowden revelations of pervasive surveillance, there was a big push to configure web servers to support Perfect Forward Secrecy.</description></item><item><title>Code Signing Baseline Requirements</title><link>https://pkic.org/2014/10/20/code-signing-baseline-requirements/</link><pubDate>Mon, 20 Oct 2014 17:00:00 +0000</pubDate><guid>https://pkic.org/2014/10/20/code-signing-baseline-requirements/</guid><description>Code signing certificates are used to sign software objects to authenticate that they originated from a verified source, allowing developers to avoid warnings commonly displayed by application software vendors such as Microsoft operating systems and Java. A fraudulent code signing certificate can wreak havoc on networks, spreading malware and adware without restraint. Certificate Authorities are tasked with ensuring that code signing applicants are legitimate entities and provide accountability for use of the certificate.</description></item><item><title>Google Plans to Deprecate SHA-1 Certificates – Updated</title><link>https://pkic.org/2014/09/24/google-plans-to-deprecate-sha-1-certificates-updated/</link><pubDate>Wed, 24 Sep 2014 18:26:09 +0000</pubDate><guid>https://pkic.org/2014/09/24/google-plans-to-deprecate-sha-1-certificates-updated/</guid><description>UPDATED September 23, 2014: The following blog post has been updated with action taken in recent weeks, as well as to reflect helpful user comments left on our August 28 blog post on this topic.
On August 19, Google announced a new policy that accelerates the deprecation of SHA-1 certificates, potentially causing websites using SHA-1 certificates to display warnings in the near future. While keeping with an earlier Microsoft announcement to accept SHA-1 certificates with an expiration date before Jan.</description></item><item><title>Google Plans to Deprecate SHA-1 Certificates</title><link>https://pkic.org/2014/08/28/google-plans-to-deprecate-sha-1-certificates/</link><pubDate>Thu, 28 Aug 2014 14:07:44 +0000</pubDate><guid>https://pkic.org/2014/08/28/google-plans-to-deprecate-sha-1-certificates/</guid><description>On August 19, Google announced a new policy that accelerates the deprecation of SHA-1 certificates, potentially causing websites using SHA-1 certificates to display warnings in the near future. With the change, Chrome 39 will show a warning for sites that have a SHA-1 certificate expiring in 2016 and require a click through warning for sites with a SHA-1 certificate expiring in 2017 or later. This proposal is scheduled for Chrome 39, which could be released as early as 12 weeks from now.</description></item><item><title>Who Sets the Rules Governing Certification Authorities?</title><link>https://pkic.org/2014/08/19/who-sets-the-rules-governing-certification-authorities/</link><pubDate>Tue, 19 Aug 2014 15:30:46 +0000</pubDate><guid>https://pkic.org/2014/08/19/who-sets-the-rules-governing-certification-authorities/</guid><description>Every time something positive is published about SSL and encryption,such as Google’s recent decision making use of https encryption a favorable rating factor for a website, or negative, such as the Heartbleed issue – bloggers and others always post questions about public Certification Authorities (CAs), including general questions on who sets the rules that govern CAs. Some bloggers seem to assume there are no rules or standards, and that CAs can operate without any requirements or limitations at all — that’s incorrect.</description></item><item><title>2014 – Looking Back, Moving Forward</title><link>https://pkic.org/2014/01/06/2014-looking-back-moving-forward/</link><pubDate>Mon, 06 Jan 2014 20:00:12 +0000</pubDate><guid>https://pkic.org/2014/01/06/2014-looking-back-moving-forward/</guid><description>Looking Back at 2013 Protocol Attacks The year started with a couple of SSL/TLS protocol attacks: Lucky Thirteen and RC4 attack. Lucky Thirteen allows the decryption of sensitive information, such as passwords and cookies, when using the CBC-mode cipher suite. Lucky Thirteen can be mitigated by implementing software patches or preferring the cipher suite RC4.
That being said, RC4 was also attacked, where through 16 million sessions a small amount of plaintext can be recovered.</description></item><item><title>SHA-1 Deprecation, On to SHA-2</title><link>https://pkic.org/2013/12/16/sha-1-deprecation-on-to-sha-2/</link><pubDate>Mon, 16 Dec 2013 20:00:27 +0000</pubDate><guid>https://pkic.org/2013/12/16/sha-1-deprecation-on-to-sha-2/</guid><description>We have previously reviewed implementation of SHA-2, but with Bruce Schneier stating the need to migrate away from SHA-1 and the SHA-1 deprecation policy from Microsoft, the industry must make more progress in 2014.
Web server administrators will have to make plans to move from SSL and code signing certificates signed with the SHA-1 hashing algorithm to certificates signed with SHA-2. This is the result of the new Microsoft Root Certificate Policy where Microsoft deprecates SHA-1 and imposes the following requirements:</description></item><item><title>Java Secures Supply Chains Through Code Signing</title><link>https://pkic.org/2013/12/09/java-secures-supply-chains-through-code-signing/</link><pubDate>Mon, 09 Dec 2013 16:00:15 +0000</pubDate><guid>https://pkic.org/2013/12/09/java-secures-supply-chains-through-code-signing/</guid><description>We have recently discussed the benefits of code signing in two posts: Securing Software Distribution with Digital Signatures and Improving Code Signing. These posts covered the role of code signatures as a “digital shrinkwrap” designed to answer a simple question: Did the software I am about to run actually come from the author or has someone changed it along the way?
As software is downloaded, assembled, copied, distributed and redistributed, it can be modified at any point along the supply chain.</description></item><item><title>Improving Code Signing</title><link>https://pkic.org/2013/11/14/improving-code-signing/</link><pubDate>Thu, 14 Nov 2013 21:00:21 +0000</pubDate><guid>https://pkic.org/2013/11/14/improving-code-signing/</guid><description>Previously, we discussed how code signing certificates play a key role in the trust framework by proving the authenticity of software. As mentioned, code signing certificates act as a certification that the software was unmodified after publication. Although current code signing practices greatly reduce the threats of malware and adware embedded in signed objects, the sophistication of threats has risen and there is a need for improvement. When code signing was new, skilled criminal hackers were the exception and script kiddies were the norm.</description></item><item><title>Securing Software Distribution with Digital Code Signing</title><link>https://pkic.org/2013/10/16/securing-software-distribution-with-digital-code-signing/</link><pubDate>Wed, 16 Oct 2013 18:16:21 +0000</pubDate><guid>https://pkic.org/2013/10/16/securing-software-distribution-with-digital-code-signing/</guid><description>Code signing certificates from publicly trusted Certification Authorities (CAs) fulfill a vital need for authentication of software distributed over the Internet in our interconnected world. As the commonly referred to “Internet of things” continues to grow, consumers have access to millions of applications for their desktops, laptops, and mobile devices. Creative software engineers provide us with applications to cover any of our potential needs or interests. Cybercriminals and others with malicious intent recognize this as an opportunity and seek to trick us into installing malicious software (malware) — programs that hijack our computers, steal our money, or try to inflict harm.</description></item><item><title>The Importance of Revocation Checking Part 2: A Real World Example</title><link>https://pkic.org/2013/03/11/the-importance-of-revocation-checking-part-2-a-real-world-example/</link><pubDate>Mon, 11 Mar 2013 16:00:08 +0000</pubDate><guid>https://pkic.org/2013/03/11/the-importance-of-revocation-checking-part-2-a-real-world-example/</guid><description>Just last week, a new security incident related to certificate revocation checking made headlines. It was discovered that a legitimate website was hosting a malicious Java application that installed malware on the computers of people who visited the site. This comes after recent updates that introduced Security Level settings in Java, and then raised the default from Medium to High. At the high level, users are shown a warning before any unsigned Java code is executed.</description></item></channel></rss>
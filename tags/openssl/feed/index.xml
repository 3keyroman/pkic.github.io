<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenSSL on PKI Consortium</title><link>https://pkic.org/tags/openssl/</link><description>Recent content in OpenSSL on PKI Consortium</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>PKI Consortium, Inc. All Rights Reserved</copyright><lastBuildDate>Fri, 30 Sep 2016 17:12:49 +0000</lastBuildDate><atom:link href="https://pkic.org/tags/openssl/feed/index.xml" rel="self" type="application/rss+xml"/><item><title>Always-On SSL</title><link>https://pkic.org/2016/09/30/always-on-ssl/</link><pubDate>Fri, 30 Sep 2016 17:12:49 +0000</pubDate><guid>https://pkic.org/2016/09/30/always-on-ssl/</guid><description>There is no doubt that content owners and publishers have a duty to encourage trust and the confidence during internet usage by adopting security best practices. If a customer believes that their data and identity are safe and protected, they are more inclined to continue their online transactions. Industry best practices for website protection should be vendor-neutral, easy to implement, and globally accessible. Websites should take all the reasonable steps possible to adopt best practices in secure design and implementation, and this includes using Always-On SSL across the entire website.</description></item><item><title>SSL 2.0 and DROWN</title><link>https://pkic.org/2016/04/04/ssl-2.0-and-drown/</link><pubDate>Mon, 04 Apr 2016 18:41:33 +0000</pubDate><guid>https://pkic.org/2016/04/04/ssl-2.0-and-drown/</guid><description>A team of researchers has announced a vulnerability with SSL 2.0 called Decrypting RSA with Obsolete and Weakened eNcryption; otherwise known as DROWN.
SSL 2.0 is a version of the SSL/TLS security protocols. It was released in February 1995, but due to security flaws was superseded by SSL 3.0 in 1996.
DROWN is a cross-protocol attack where the bugs in SSL 2.0 can be used to attack the security of connections that use TLS.</description></item><item><title>2016 – Looking Back, Moving Forward</title><link>https://pkic.org/2015/12/14/2016-looking-back-moving-forward/</link><pubDate>Mon, 14 Dec 2015 19:53:24 +0000</pubDate><guid>https://pkic.org/2015/12/14/2016-looking-back-moving-forward/</guid><description>Looking Back at 2015 A number of new tactics proved 2015 was no exception to an active year defending against ever increasing security issues. Vendors found new and creative ways to provide vulnerabilities including the now popular man-in-the-middle (MitM) attacks. MitM as well as a host of other new vulnerabilities caused browsers to rethink their security requirements. This article gives a flashback of the exploits and industry changes from 2015 and looks ahead at the latest security requirements and how it impacts IT security teams.</description></item><item><title>OpenSSL High Severity Vulnerability</title><link>https://pkic.org/2015/07/10/openssl-high-severity-vulnerability/</link><pubDate>Fri, 10 Jul 2015 20:14:48 +0000</pubDate><guid>https://pkic.org/2015/07/10/openssl-high-severity-vulnerability/</guid><description>OpenSSL has announced a high severity vulnerability, CVE-2015-1793 which will require an upgrade to some OpenSSL installations.
The vulnerability was discovered by Google personnel Adam Langley and David Benjamin on June 24, 2015. Google has been working on an alternative to OpenSSL called BoringSSL. This has allowed Google to reduce vulnerabilities in their installations, but is also a benefit to OpenSSL as issues have been reported. Note that BoringSSL is not impacted.</description></item><item><title>The Insecurity of Mobile Applications</title><link>https://pkic.org/2015/06/11/the-insecurity-of-mobile-applications/</link><pubDate>Thu, 11 Jun 2015 18:30:23 +0000</pubDate><guid>https://pkic.org/2015/06/11/the-insecurity-of-mobile-applications/</guid><description>Recently, we read about lots of SSL/TLS-related vulnerabilities found in mobile apps, which should come as no surprise. We were warned about this back in 2012 (see these studies). More warnings came in 2014 from CERT and FireEye. The Open Web Application Security Project (OWASP) listed “insufficient transport layer protection” as number three (#3) in its top 10 list of mobile security problems of 2014. Apps that don’t use SSL/TLS are particularly vulnerable, given the ease of reading and modifying unsecured traffic at Wi-Fi hot spots, for example.</description></item><item><title>2015 – Looking Back, Moving Forward</title><link>https://pkic.org/2015/01/06/2015-looking-back-moving-forward/</link><pubDate>Tue, 06 Jan 2015 16:30:28 +0000</pubDate><guid>https://pkic.org/2015/01/06/2015-looking-back-moving-forward/</guid><description>Looking Back at 2014 End of 1024-Bit Security In 2014, the SSL industry moved to issuing a minimum security of 2048-bit RSA certificates. Keys smaller than 2048 are no longer allowed in server certificates. In addition, Microsoft and Mozilla started to remove 1024-bit roots from their certificate stores. Hopefully, the key size change will support users through to 2030.
Push to Perfect Forward Secrecy Following the Edward Snowden revelations of pervasive surveillance, there was a big push to configure web servers to support Perfect Forward Secrecy.</description></item><item><title>A Follow-up on POODLE and SSL 3.0</title><link>https://pkic.org/2014/11/21/a-follow-up-on-poodle-and-ssl-3.0/</link><pubDate>Fri, 21 Nov 2014 15:15:32 +0000</pubDate><guid>https://pkic.org/2014/11/21/a-follow-up-on-poodle-and-ssl-3.0/</guid><description>In October 2014, Google announced POODLE, an SSL 3.0 protocol attack.
To bring you up to speed, the SSL/TLS protocol is the most important and popular security protocol on the Internet. The Secure Sockets Layer (SSL) protocol was developed by Netscape. They quickly moved from SSL 1.0 to 2.0 and finalized with SSL 3.0 in 1996.
This protocol was then picked up by the IETF, who released it under the name of Transport Layer Security (TLS).</description></item><item><title>Perfect Forward Secrecy</title><link>https://pkic.org/2014/04/11/perfect-forward-secrecy/</link><pubDate>Fri, 11 Apr 2014 16:30:26 +0000</pubDate><guid>https://pkic.org/2014/04/11/perfect-forward-secrecy/</guid><description>Recent revelations from Edward Snowden about pervasive government surveillance have led to many questions about the safety of communications using the SSL/TLS protocol. Such communications are generally safe from eavesdroppers, as long as certain precautions are observed. For example, configuring your web server to avoid using SSL2 and SSL3, favoring newer versions of TLS like TLS 1.2, selecting strong ciphersuites, etc.
But even if your server is configured properly, you still must secure the private key associated with your SSL certificate.</description></item><item><title>Heartbleed Bug Vulnerability: Discovery, Impact and Solution</title><link>https://pkic.org/2014/04/09/heartbleed-bug-vulnerability-discovery-impact-and-solution/</link><pubDate>Wed, 09 Apr 2014 19:30:34 +0000</pubDate><guid>https://pkic.org/2014/04/09/heartbleed-bug-vulnerability-discovery-impact-and-solution/</guid><description>On April 7, 2014, a vulnerability in the OpenSSL cryptographic library was announced to the Internet community. Aptly labeled as the Heartbleed bug, this vulnerability affects OpenSSL versions 1.0.1 through 1.0.1f (inclusive). The Heartbleed bug is not a flaw in the SSL or TLS protocols; rather, it is a flaw in the OpenSSL implementation of the TLS/DTLS heartbeat functionality. The flaw is not related or introduced by publicly trusted certificates and is instead a problem with server software.</description></item><item><title>Always-On SSL, Part I</title><link>https://pkic.org/2014/01/16/always-on-ssl-part-i/</link><pubDate>Thu, 16 Jan 2014 16:00:40 +0000</pubDate><guid>https://pkic.org/2014/01/16/always-on-ssl-part-i/</guid><description>There is no doubt that content owners and publishers have a duty to encourage trust and the confidence during internet usage by adopting security best practices. If a customer believes that their data and identity are safe and protected, they are more inclined to continue their online transactions. Industry best practices for website protection should be vendor-neutral, easy to implement, and globally accessible. Websites should take all the reasonable steps possible to adopt best practices in secure design and implementation, and this includes using Always-On SSL across the entire website.</description></item><item><title>Getting the Most Out of SSL Part 2: Configuration</title><link>https://pkic.org/2013/06/29/getting-the-most-out-of-ssl-part-2-configuration/</link><pubDate>Sat, 29 Jun 2013 01:19:26 +0000</pubDate><guid>https://pkic.org/2013/06/29/getting-the-most-out-of-ssl-part-2-configuration/</guid><description>They say the most complicated skill is to be simple; despite SSL and HTTPS having been around for a long time, they still are not as simple as they could be.
One of the reasons for this is that the security industry is constantly learning more about how to design and build secure systems; as a result, the protocols and software used to secure online services need to continuously evolve to keep up with the latest risks.</description></item><item><title>RSA Recap – Securing Your Site</title><link>https://pkic.org/2013/03/08/rsa-recap-securing-your-site/</link><pubDate>Fri, 08 Mar 2013 17:45:55 +0000</pubDate><guid>https://pkic.org/2013/03/08/rsa-recap-securing-your-site/</guid><description>At RSA last week a few of us participated in panel discussions that focused on SSL/TLS. During the panel that I moderated on Friday, one theme we addressed was secure server configuration. One of CASC’s goals is to help harden existing SSL/TLS implementations against vulnerabilities—because most SSL/TLS exploits arise from suboptimal website configurations. These vulnerabilities and attacks can be mitigated or even eliminated with proper server configuration and good website design.</description></item></channel></rss>
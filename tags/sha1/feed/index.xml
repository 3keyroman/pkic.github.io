<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SHA1 on Public Key Infrastructure (PKI) Consortium</title><link>/tags/sha1/</link><description>Recent content in SHA1 on Public Key Infrastructure (PKI) Consortium</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>PKI Consortium, Inc. All Rights Reserved</copyright><lastBuildDate>Thu, 09 Jul 2020 18:43:06 +0000</lastBuildDate><atom:link href="/tags/sha1/feed/index.xml" rel="self" type="application/rss+xml"/><item><title>One Year Certs</title><link>/2020/07/09/one-year-certs/</link><pubDate>Thu, 09 Jul 2020 18:43:06 +0000</pubDate><guid>/2020/07/09/one-year-certs/</guid><description>Starting on September 1st, SSL/TLS certificates cannot be issued for longer than 13 months (397 days). This change was first announced by Apple at the CA/Browser Forum Spring Face-to-Face event in Bratislava back in March.</description></item><item><title>2015 – Looking Back, Moving Forward</title><link>/2015/01/06/2015-looking-back-moving-forward/</link><pubDate>Tue, 06 Jan 2015 16:30:28 +0000</pubDate><guid>/2015/01/06/2015-looking-back-moving-forward/</guid><description>Looking Back at 2014 End of 1024-Bit Security In 2014, the SSL industry moved to issuing a minimum security of 2048-bit RSA certificates. Keys smaller than 2048 are no longer allowed in server certificates. In addition, Microsoft and Mozilla started to remove 1024-bit roots from their certificate stores. Hopefully, the key size change will support users through to 2030.
Push to Perfect Forward Secrecy Following the Edward Snowden revelations of pervasive surveillance, there was a big push to configure web servers to support Perfect Forward Secrecy.</description></item><item><title>Google Plans to Deprecate SHA-1 Certificates – Updated</title><link>/2014/09/24/google-plans-to-deprecate-sha-1-certificates-updated/</link><pubDate>Wed, 24 Sep 2014 18:26:09 +0000</pubDate><guid>/2014/09/24/google-plans-to-deprecate-sha-1-certificates-updated/</guid><description>UPDATED September 23, 2014: The following blog post has been updated with action taken in recent weeks, as well as to reflect helpful user comments left on our August 28 blog post on this topic.
On August 19, Google announced a new policy that accelerates the deprecation of SHA-1 certificates, potentially causing websites using SHA-1 certificates to display warnings in the near future. While keeping with an earlier Microsoft announcement to accept SHA-1 certificates with an expiration date before Jan.</description></item><item><title>2014 – Looking Back, Moving Forward</title><link>/2014/01/06/2014-looking-back-moving-forward/</link><pubDate>Mon, 06 Jan 2014 20:00:12 +0000</pubDate><guid>/2014/01/06/2014-looking-back-moving-forward/</guid><description>Looking Back at 2013 Protocol Attacks The year started with a couple of SSL/TLS protocol attacks: Lucky Thirteen and RC4 attack. Lucky Thirteen allows the decryption of sensitive information, such as passwords and cookies, when using the CBC-mode cipher suite. Lucky Thirteen can be mitigated by implementing software patches or preferring the cipher suite RC4.
That being said, RC4 was also attacked, where through 16 million sessions a small amount of plaintext can be recovered.</description></item><item><title>SHA-1 Deprecation, On to SHA-2</title><link>/2013/12/16/sha-1-deprecation-on-to-sha-2/</link><pubDate>Mon, 16 Dec 2013 20:00:27 +0000</pubDate><guid>/2013/12/16/sha-1-deprecation-on-to-sha-2/</guid><description>We have previously reviewed implementation of SHA-2, but with Bruce Schneier stating the need to migrate away from SHA-1 and the SHA-1 deprecation policy from Microsoft, the industry must make more progress in 2014.
Web server administrators will have to make plans to move from SSL and code signing certificates signed with the SHA-1 hashing algorithm to certificates signed with SHA-2. This is the result of the new Microsoft Root Certificate Policy where Microsoft deprecates SHA-1 and imposes the following requirements:</description></item><item><title>Encryption Still Works – It’s About How You Implement It</title><link>/2013/09/13/encryption-still-works-its-about-how-you-implement-it/</link><pubDate>Fri, 13 Sep 2013 17:04:21 +0000</pubDate><guid>/2013/09/13/encryption-still-works-its-about-how-you-implement-it/</guid><description>The September 5th joint article by the New York Times and Guardian newspapers on NSA’s and GCHQ’s efforts to circumvent encryption implementation have left many people speculating on the security of the data they are transmitting over the Internet. Hopefully, this blog post will provide some guidance and help understand SSL in light of these recent articles. Importantly, the articles point out that the primary means of attacking SSL/TLS do not exploit a vulnerability in the protocol itself but instead aim to exploit poor implementations of the protocol, insecure servers, and weak cryptography.</description></item><item><title>Public Key Pinning</title><link>/2013/08/28/public-key-pinning/</link><pubDate>Wed, 28 Aug 2013 16:29:19 +0000</pubDate><guid>/2013/08/28/public-key-pinning/</guid><description>The current browser-certification authority (CA) trust model allows a website owner to obtain its SSL certificate from any one of a number of CAs. That flexibility also means that a certificate mis-issued by a CA other than the authorized CA chosen by the website owner, would also be accepted as trustworthy by browsers.
This problem was displayed most dramatically by the DigiNotar attack in 2011 and in a mistaken CA certificate issued by TURKTRUST in 2012.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vulnerability on Public Key Infrastructure (PKI) Consortium</title><link>/tags/vulnerability/</link><description>Recent content in Vulnerability on Public Key Infrastructure (PKI) Consortium</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>PKI Consortium, Inc. All Rights Reserved</copyright><lastBuildDate>Thu, 10 Oct 2019 15:52:09 +0000</lastBuildDate><atom:link href="/tags/vulnerability/feed/index.xml" rel="self" type="application/rss+xml"/><item><title>The Insecure Elephant in the Room</title><link>/2019/10/10/the-insecure-elephant-in-the-room/</link><pubDate>Thu, 10 Oct 2019 15:52:09 +0000</pubDate><guid>/2019/10/10/the-insecure-elephant-in-the-room/</guid><description>The purpose of this article The purpose of this article is to demonstrate why I believe browser-based UI for website identity can make the web safer for everyone. I explain in great detail, the reasons why the UI and UX didn’t work in the past. And what’s left is only making the problem worse instead of better.
Some people seem to find it difficult to consume my thoughts about the enforcement of “HTTPS EVERYWHERE”, free DV certs and the browser padlock.</description></item><item><title>9 Common Myths About CAs</title><link>/2019/08/01/9-common-myths-about-cas/</link><pubDate>Thu, 01 Aug 2019 15:00:04 +0000</pubDate><guid>/2019/08/01/9-common-myths-about-cas/</guid><description>Over the years misconceptions about CAs and the SSL infrastructure have arisen. Below is a list of common myths related to SSL and CAs.
Myth #1: CAs are not regulated Fact: CAs are subject to various checks and balances, including third-party qualified audits through WebTrust or ETSI and strict criteria set forth by leading browsers, before they are accepted in browser root stores. Similarly, the CA/Browser Forum’s Baseline Requirements and Network Security Guidelines establish global standards for certificate issuance and CA controls that will soon be included in third-party auditing standards.</description></item><item><title>The Advantages of Short-Lived SSL Certificates for the Enterprise</title><link>/2019/07/18/the-advantages-of-short-lived-ssl-certificates-for-the-enterprise/</link><pubDate>Thu, 18 Jul 2019 18:16:24 +0000</pubDate><guid>/2019/07/18/the-advantages-of-short-lived-ssl-certificates-for-the-enterprise/</guid><description>Short validity period certificates are becoming ever more common to reduce the scope of data compromised if a server vulnerability is uncovered, such as HeartBleed. Good security practice dictates changing keys on a regular basis, normally annually, but if you want to limit your exposure further, you can replace your certificates and underlying keys more frequently.
Sandstorm is an open source server software that makes it easy to install web apps.</description></item><item><title>What the Latest Firefox Update Means for SSL Certificates</title><link>/2019/06/14/what-the-latest-firefox-update-means-for-ssl-certificates/</link><pubDate>Fri, 14 Jun 2019 18:13:34 +0000</pubDate><guid>/2019/06/14/what-the-latest-firefox-update-means-for-ssl-certificates/</guid><description>Last month marked the release of Firefox 66, the newest iteration of the ever-popular web browser. The update adds a number of interesting new features, including improvements to content loading and extension storage, auto-play sound blocking, and support for the AV1 codec (on the Windows version at least). The search feature has also been improved, and, as is typical of browser updates, a number of known security vulnerabilities have been patched.</description></item><item><title>2019 – Looking Back, Moving Forward</title><link>/2019/01/03/2019-looking-back-moving-forward/</link><pubDate>Thu, 03 Jan 2019 14:24:26 +0000</pubDate><guid>/2019/01/03/2019-looking-back-moving-forward/</guid><description>Looking Back at 2018 2018 was an active year for SSL/TLS. We saw the SSL/TLS certificate validity period drop to 825-days and the mass deployment of Certificate Transparency (CT). TLS 1.3 protocol was finally completed and published; and Chrome status bar security indicators changing to remove “secure” and to concentrate on “not secure.” The CA/Browser Forum has been reformed, the London Protocol was announced and the nearly full distrust of Symantec SSL completed.</description></item><item><title>TLS 1.3 Includes Improvements to Security and Performance</title><link>/2018/04/10/tls-1.3-includes-improvements-to-security-and-performance/</link><pubDate>Tue, 10 Apr 2018 17:55:05 +0000</pubDate><guid>/2018/04/10/tls-1.3-includes-improvements-to-security-and-performance/</guid><description>Last month saw the final adoption, after 4 years of work, of TLS version 1.3 by the Internet Engineering Task Force (IETF). This latest iteration of the protocol for secure communications on the internet boasts several noteworthy improvements to both security and performance:
Security All cipher suites that do not provide forward secrecy have been eliminated from TLS 1.3. This is a very important security property, because without forward secrecy, if a server’s private key is compromised today, any previously-recorded conversations with that server dating back as long as the key was in use could be decrypted.</description></item><item><title>Chrome Will Show Not Secure for all HTTP Sites Starting July 2018</title><link>/2018/02/15/chrome-will-show-not-secure-for-all-http-sites-starting-july-2018/</link><pubDate>Thu, 15 Feb 2018 18:30:48 +0000</pubDate><guid>/2018/02/15/chrome-will-show-not-secure-for-all-http-sites-starting-july-2018/</guid><description>Through 2017 and into 2018, we have seen the use of HTTPS grow substantially. Last Fall Google announced the following status:
Over 68% of Chrome traffic on both Android and Windows is now protected Over 78% of Chrome traffic on both Chrome OS and Mac is now protected 81 of the top 100 sites on the web use HTTPS by default Google helped to drive this growth by implementing the “Secure” and “Not secure” status in Chrome’s status bar.</description></item><item><title>2018 – Looking Back, Moving Forward</title><link>/2018/01/06/2018-looking-back-moving-forward/</link><pubDate>Sat, 06 Jan 2018 14:31:22 +0000</pubDate><guid>/2018/01/06/2018-looking-back-moving-forward/</guid><description>Looking Back at 2017 2017 saw the end of SHA-1 in public trust SSL/TLS certificates and the start of Certification Authority Authorization (CAA) allowing domain owners to authorize their CA. A “Not secure” browser indication was propagated to push more websites to support HTTPS. There was also a change in the certification authority (CA) ownership with DigiCert acquiring Symantec’s SSL and related PKI business and Francisco Partners buying Comodo’s CA.</description></item><item><title>2017 – Looking Back, Moving Forward</title><link>/2017/01/13/2017-looking-back-moving-forward/</link><pubDate>Fri, 13 Jan 2017 21:11:15 +0000</pubDate><guid>/2017/01/13/2017-looking-back-moving-forward/</guid><description>Looking Back at 2016 Fortunately, 2016 was not a year full of SSL/TLS vulnerabilities. Although some researchers did prove old cryptography algorithms should be put out to pasture. The year showed the end of public-trusted SHA-1 SSL/TLS certificates. It also showed more transparency should be considered due to issues discovered with a few certification authorities (CAs). The great news is HTTPS is no longer the minority — after 20 years, connections using HTTPS has surpassed HTTP.</description></item><item><title>Stricter Standards for SSL Server Test Coming in 2017</title><link>/2016/12/13/stricter-standards-for-ssl-server-test-coming-in-2017/</link><pubDate>Tue, 13 Dec 2016 16:32:08 +0000</pubDate><guid>/2016/12/13/stricter-standards-for-ssl-server-test-coming-in-2017/</guid><description>This is a good time to offer a reminder that the CASC has a great tool for secure server testing, the SSL Server Test. The tool grades your server installation and reviews the: certificate, protocol support, key exchange and cipher strength for security against standards and known vulnerabilities.
The grading tool also provides feedback on handshake simulations with various versions of browsers and operating systems. This lets the server administrator know which implementations are supported.</description></item><item><title>Why Is Certificate Expiration Necessary?</title><link>/2016/10/19/why-is-certificate-expiration-necessary/</link><pubDate>Wed, 19 Oct 2016 16:26:21 +0000</pubDate><guid>/2016/10/19/why-is-certificate-expiration-necessary/</guid><description>The Long Life Certificate – Why It Doesn’t Exist Why is certificate expiration even necessary? Wouldn’t it be better if I could just buy a certificate with a long life before expiration? It would really simplify certificate management if it could be installed and forgotten. Simple, no management required, just file-and-forget.
Imagine, I’ve been in business, starting say 10 to 15 years ago. I roll out my web pages and secure them with a 20-year-validity SSL certificate.</description></item><item><title>Chrome to Show HTTP Sites as Not Secure</title><link>/2016/09/15/chrome-to-show-http-sites-as-not-secure/</link><pubDate>Thu, 15 Sep 2016 18:59:31 +0000</pubDate><guid>/2016/09/15/chrome-to-show-http-sites-as-not-secure/</guid><description>Always-On SSL should be deployed to prevent the “Not secure” warning Website owners who do not secure their website with an SSL/TLS certificate will have to rethink their online strategy. In a push to make the Internet safer for all users, Google will soon be issuing a stronger warning to visitors who navigate to a website that does not have the protection of an SSL/TLS certificate.
With the release of Chrome 53 on Windows, Google has changed the trust indications to introduce the circle-i.</description></item><item><title>SSL 2.0 and DROWN</title><link>/2016/04/04/ssl-2.0-and-drown/</link><pubDate>Mon, 04 Apr 2016 18:41:33 +0000</pubDate><guid>/2016/04/04/ssl-2.0-and-drown/</guid><description>A team of researchers has announced a vulnerability with SSL 2.0 called Decrypting RSA with Obsolete and Weakened eNcryption; otherwise known as DROWN.
SSL 2.0 is a version of the SSL/TLS security protocols. It was released in February 1995, but due to security flaws was superseded by SSL 3.0 in 1996.
DROWN is a cross-protocol attack where the bugs in SSL 2.0 can be used to attack the security of connections that use TLS.</description></item><item><title>Moving to Always on HTTPS, Part 2 of 2; Upgrading to HTTP Strict Transport Security</title><link>/2016/02/18/moving-to-always-on-https-part-2-of-2-upgrading-to-http-strict-transport-security/</link><pubDate>Thu, 18 Feb 2016 16:15:16 +0000</pubDate><guid>/2016/02/18/moving-to-always-on-https-part-2-of-2-upgrading-to-http-strict-transport-security/</guid><description>Part 1 of this blog post discussed browser security indicators and how to avoid getting warnings about mixed content on your website. (Mixed content leaves a door open that allows an attacker to snoop or inject malicious content during the browsing session.) This Part 2 discusses other technical measures to implement Always on HTTPS. As I noted previously, one of the difficulties with implementing Always on HTTPS is that content is often provided by third parties.</description></item><item><title>Moving to Always on HTTPS, Part 1 of 2; Marking HTTP as Unsecure</title><link>/2016/02/03/moving-to-always-on-https-part-1-of-2-marking-http-as-unsecure/</link><pubDate>Wed, 03 Feb 2016 21:32:31 +0000</pubDate><guid>/2016/02/03/moving-to-always-on-https-part-1-of-2-marking-http-as-unsecure/</guid><description>Over the past several years there has been increased discussion about deprecating HTTP and making HTTPS the default protocol for the World Wide Web. (HTTP stands for “HyperText Transfer Protocol” and the “S” in HTTPS is enabled with an SSL/TLS digital certificate properly installed and configured on a web server.) These discussions have taken place in the context of browser security indications and technical improvements simplifying the global movement to “Always on HTTPS.</description></item><item><title>What Will Happen With SHA-1 and Browser Users on January 1st, 2016?</title><link>/2016/01/05/what-will-happen-with-sha-1-and-browser-users-on-january-1st-2016/</link><pubDate>Tue, 05 Jan 2016 19:50:25 +0000</pubDate><guid>/2016/01/05/what-will-happen-with-sha-1-and-browser-users-on-january-1st-2016/</guid><description>On January 1, 2016, the public trust certification authorities (CAs) will stop issuing SHA-1 signed SSL/TLS certificates. What will happen?
Will all websites using SHA-1 fail? No. SHA-1 will be supported by browsers and operating systems through 2016. Microsoft and Mozilla have announced that Windows and Firefox will not support SHA-1 in 2017, but no change for 2016. We expect Apple to follow the same protocol.
What about Chrome? Chrome will still provide warning indications in the browser status bar for SHA-1 signed certificates which expire in 2016 and in 2017 or later.</description></item><item><title>2016 – Looking Back, Moving Forward</title><link>/2015/12/14/2016-looking-back-moving-forward/</link><pubDate>Mon, 14 Dec 2015 19:53:24 +0000</pubDate><guid>/2015/12/14/2016-looking-back-moving-forward/</guid><description>Looking Back at 2015 A number of new tactics proved 2015 was no exception to an active year defending against ever increasing security issues. Vendors found new and creative ways to provide vulnerabilities including the now popular man-in-the-middle (MitM) attacks. MitM as well as a host of other new vulnerabilities caused browsers to rethink their security requirements. This article gives a flashback of the exploits and industry changes from 2015 and looks ahead at the latest security requirements and how it impacts IT security teams.</description></item><item><title>OpenSSL High Severity Vulnerability</title><link>/2015/07/10/openssl-high-severity-vulnerability/</link><pubDate>Fri, 10 Jul 2015 20:14:48 +0000</pubDate><guid>/2015/07/10/openssl-high-severity-vulnerability/</guid><description>OpenSSL has announced a high severity vulnerability, CVE-2015-1793 which will require an upgrade to some OpenSSL installations.
The vulnerability was discovered by Google personnel Adam Langley and David Benjamin on June 24, 2015. Google has been working on an alternative to OpenSSL called BoringSSL. This has allowed Google to reduce vulnerabilities in their installations, but is also a benefit to OpenSSL as issues have been reported. Note that BoringSSL is not impacted.</description></item><item><title>The Insecurity of Mobile Applications</title><link>/2015/06/11/the-insecurity-of-mobile-applications/</link><pubDate>Thu, 11 Jun 2015 18:30:23 +0000</pubDate><guid>/2015/06/11/the-insecurity-of-mobile-applications/</guid><description>Recently, we read about lots of SSL/TLS-related vulnerabilities found in mobile apps, which should come as no surprise. We were warned about this back in 2012 (see these studies). More warnings came in 2014 from CERT and FireEye. The Open Web Application Security Project (OWASP) listed “insufficient transport layer protection” as number three (#3) in its top 10 list of mobile security problems of 2014. Apps that don’t use SSL/TLS are particularly vulnerable, given the ease of reading and modifying unsecured traffic at Wi-Fi hot spots, for example.</description></item><item><title>Practical Steps to Counter the Logjam Attack</title><link>/2015/05/26/practical-steps-to-counter-the-logjam-attack/</link><pubDate>Tue, 26 May 2015 16:00:54 +0000</pubDate><guid>/2015/05/26/practical-steps-to-counter-the-logjam-attack/</guid><description>Another flaw has been found in the basic encryption algorithms that secure the Internet. This flaw, named the Logjam attack by its discoverers (researchers from various universities and companies), allows an attacker that can carry out man-in-the-middle (MitM) attacks to weaken the encryption used in secure connections (such as HTTPS, SSH, and VPNs). In theory, this means that an attacker (with sufficient resources) can break the encryption and read the “secure” traffic.</description></item><item><title>Why You Should Get Familiar With TLS If You Accept Credit Cards</title><link>/2015/04/28/why-you-should-get-familiar-with-tls-if-you-accept-credit-cards/</link><pubDate>Tue, 28 Apr 2015 16:27:35 +0000</pubDate><guid>/2015/04/28/why-you-should-get-familiar-with-tls-if-you-accept-credit-cards/</guid><description>The group that manages the Payment Card Industry Data Security Standard quietly announced in February that an imminent update was coming to its payment card and application requirements related to the use of the SSL encryption protocol. Since then, there has been growing concern among merchants about what the changes mean to them.
The confusion among retailers generally can be boiled down to two questions:
What will the new updates require me to do?</description></item><item><title>HTTP/2 Is Speedy and Secure</title><link>/2015/04/20/http/2-is-speedy-and-secure/</link><pubDate>Mon, 20 Apr 2015 15:15:10 +0000</pubDate><guid>/2015/04/20/http/2-is-speedy-and-secure/</guid><description>Since we last wrote about SSL/TLS performance, there has been a lot of activity in the IETF HTTP Working Group, resulting in the February announcement that the next version of HTTP has been approved. This is big news because it means that major SSL/TLS performance improvements are on the way.
Background When your browser connects to a website today, it most likely uses the HTTP/1.1 protocol that was defined in 1999 in RFC 2616.</description></item><item><title>Is Your SSL Server Vulnerable to a FREAK Attack?</title><link>/2015/03/11/is-your-ssl-server-vulnerable-to-a-freak-attack/</link><pubDate>Wed, 11 Mar 2015 16:00:22 +0000</pubDate><guid>/2015/03/11/is-your-ssl-server-vulnerable-to-a-freak-attack/</guid><description>FREAK is a new man-in-the-middle (MITM) vulnerability discovered by a group of cryptographers at INRIA, Microsoft Research and IMDEA. FREAK stands for “Factoring RSA-EXPORT Keys.”
The vulnerability dates back to the 1990s, when the US government banned selling crypto software overseas, unless it used export cipher suites which involved encryption keys no longer than 512-bits.
The issue is there are still some clients who let crypto be degraded from “strong RSA” to “export grade RSA”.</description></item><item><title>Lenovo Enables Man-in-the-Middle Attacks Via Superfish Adware</title><link>/2015/02/20/lenovo-enables-man-in-the-middle-attacks-via-superfish-adware/</link><pubDate>Fri, 20 Feb 2015 22:27:36 +0000</pubDate><guid>/2015/02/20/lenovo-enables-man-in-the-middle-attacks-via-superfish-adware/</guid><description>Lenovo is selling computers that contain the Superfish application which “supplements” the user’s SSL sessions to enable their adware application to deliver content transparently; however, due to poor security design this leaves users vulnerable to man-in-the-middle attacks.
How it was supposed to work Superfish uses the program “Visual Discovery” to process images in browser content and then displays ads for similar goods and services. This sounds like any other adware application, but in order to maintain SSL sessions and not alert users with security warnings, Superfish is serving up these images over https.</description></item><item><title>SSL Certificate Validity Periods Limited to 39 Months Starting in April</title><link>/2015/02/19/ssl-certificate-validity-periods-limited-to-39-months-starting-in-april/</link><pubDate>Thu, 19 Feb 2015 23:52:18 +0000</pubDate><guid>/2015/02/19/ssl-certificate-validity-periods-limited-to-39-months-starting-in-april/</guid><description>In accordance with the CA/Browser Forum Baseline Requirements, effective April 1, 2015, Certificate Authorities (CAs) will no longer be able to issue SSL Certificates with a validity period longer than 39 months.
Shortening the validity period to 39 months is the result of much consideration within the CA/Browser Forum to arrive at a duration that allows optimal usability while maintaining the tightest network security. A shortened validity period will significantly improve Internet security by requiring administrators to renew and verify their certificates more often.</description></item><item><title>2015 – Looking Back, Moving Forward</title><link>/2015/01/06/2015-looking-back-moving-forward/</link><pubDate>Tue, 06 Jan 2015 16:30:28 +0000</pubDate><guid>/2015/01/06/2015-looking-back-moving-forward/</guid><description>Looking Back at 2014 End of 1024-Bit Security In 2014, the SSL industry moved to issuing a minimum security of 2048-bit RSA certificates. Keys smaller than 2048 are no longer allowed in server certificates. In addition, Microsoft and Mozilla started to remove 1024-bit roots from their certificate stores. Hopefully, the key size change will support users through to 2030.
Push to Perfect Forward Secrecy Following the Edward Snowden revelations of pervasive surveillance, there was a big push to configure web servers to support Perfect Forward Secrecy.</description></item><item><title>POODLE for TLS</title><link>/2014/12/16/poodle-for-tls/</link><pubDate>Tue, 16 Dec 2014 16:10:34 +0000</pubDate><guid>/2014/12/16/poodle-for-tls/</guid><description>The POODLE attack on SSL 3.0 has now been extended to some implementations of TLS. POODLE for TLS can be tracked through CVE-2014-8730.
POODLE is not a flaw with the certificate authority (CA), SSL certificates or certificate management system. POODLE is a TLS implementation bug.
Adam Langley states that “TLS’s padding is a subset of SSLv3’s padding so, technically, you could use an SSLv3 decoding function with TLS and it would still work fine.</description></item><item><title>’Tis the Season for Online Safety</title><link>/2014/11/30/tis-the-season-for-online-safety/</link><pubDate>Sun, 30 Nov 2014 13:00:39 +0000</pubDate><guid>/2014/11/30/tis-the-season-for-online-safety/</guid><description>The holidays are approaching as quickly as a sleigh pulled by magic reindeer, and every year it seems like the shopping season starts earlier and earlier. In many places, Christmas decorations are now put up before Halloween, ensuring a long and profitable season for merchants. And while most of us have had the experience of opening a disappointing gift on Christmas morning, one thing that can ruin your holiday faster than a homemade sweater is finding out that someone has obtained your credit card number, or compromised your account on your favorite shopping website.</description></item><item><title>A Follow-up on POODLE and SSL 3.0</title><link>/2014/11/21/a-follow-up-on-poodle-and-ssl-3.0/</link><pubDate>Fri, 21 Nov 2014 15:15:32 +0000</pubDate><guid>/2014/11/21/a-follow-up-on-poodle-and-ssl-3.0/</guid><description>In October 2014, Google announced POODLE, an SSL 3.0 protocol attack.
To bring you up to speed, the SSL/TLS protocol is the most important and popular security protocol on the Internet. The Secure Sockets Layer (SSL) protocol was developed by Netscape. They quickly moved from SSL 1.0 to 2.0 and finalized with SSL 3.0 in 1996.
This protocol was then picked up by the IETF, who released it under the name of Transport Layer Security (TLS).</description></item><item><title>Code Signing Baseline Requirements</title><link>/2014/10/20/code-signing-baseline-requirements/</link><pubDate>Mon, 20 Oct 2014 17:00:00 +0000</pubDate><guid>/2014/10/20/code-signing-baseline-requirements/</guid><description>Code signing certificates are used to sign software objects to authenticate that they originated from a verified source, allowing developers to avoid warnings commonly displayed by application software vendors such as Microsoft operating systems and Java. A fraudulent code signing certificate can wreak havoc on networks, spreading malware and adware without restraint. Certificate Authorities are tasked with ensuring that code signing applicants are legitimate entities and provide accountability for use of the certificate.</description></item></channel></rss>